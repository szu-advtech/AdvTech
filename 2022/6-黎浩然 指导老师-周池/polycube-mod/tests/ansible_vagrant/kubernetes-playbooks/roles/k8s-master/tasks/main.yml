---
# tasks file for k8s-master
# this role configures the master machine in a k8s-cluster
- name: Install packages that allow apt to be used over HTTPS
  apt:
    name: "{{ apt_packages }}"
    state: present
    update_cache: yes

- name: Add an apt signing key for Docker
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add apt repository for stable version
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
    state: present

# different versions can be installed->modify the docker_packages variable
- name: Install docker and its dependecies
  apt: 
    name: "{{ docker_packages }}"
    state: present
    update_cache: yes

- name: Add vagrant user to docker group
  user:
    name: "{{user}}" # defined in group_var/all
    group: docker

# otherwise the kubelet won't start
- name: Remove swapfile from /etc/fstab
  mount:
   name: /swapfile
   fstype: swap
   state: absent

- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0
- name: Add an apt signing key for Kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Adding apt repository for Kubernetes
  apt_repository:
   repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
   state: present
   filename: kubernetes.list

# different versions can be installed->modify the k8s_packages variable
- name: Install Kubernetes binaries
  apt: 
    name: "{{ k8s_packages }}"
    state: present
    update_cache: yes

- name: Configure node ip
  lineinfile:
    path: /etc/default/kubelet
    create: yes
    line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }} # node ip is defined in the Vagrantfile

- name: Restart kubelet
  service:
    name: kubelet
    daemon_reload: yes
    state: restarted

- name: Initialize the Kubernetes cluster using kubeadm
  command: kubeadm init --apiserver-advertise-address="{{ node_ip }}" --apiserver-cert-extra-sans="{{ node_ip }}"  --node-name k8s-master --pod-network-cidr="{{ pod_network_cidr }}" --service-cidr="{{ service_cidr }}"

- name: Enable the kernel to pass bridged IPv4 traffic to iptables' chains and the forwarding
  command: "{{ item }}"
  with_items:
    - sysctl -w net.bridge.bridge-nf-call-iptables=1
    - sysctl -w net.ipv4.ip_forward=1

- name: "Create the .kube directory for user: {{ user }}"
  file:
    path: "/home/{{ user }}/.kube"
    state: directory
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: '0755'

- name: Copy the kube config file with owner and permissions for the {{ user }} user
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ user }}/.kube/config"
    remote_src: yes
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: '0755'

- name: Install polycube pod network
  become: false # because the admin.conf has been copied to the vagrant user.
  command: kubectl apply -f "{{ item }}"
  with_items: "{{ cni_manifests }}"

- name: Generate join command
  command: kubeadm token create --print-join-command
  register: join_command

- name: Copy join command to local file
  become: false
  local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
