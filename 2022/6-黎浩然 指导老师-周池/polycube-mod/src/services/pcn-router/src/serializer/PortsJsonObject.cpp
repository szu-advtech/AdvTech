/**
* router API generated from router.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "PortsJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

PortsJsonObject::PortsJsonObject() {
  m_nameIsSet = false;
  m_ipIsSet = false;
  m_secondaryipIsSet = false;
  m_macIsSet = false;
}

PortsJsonObject::PortsJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_ipIsSet = false;
  m_secondaryipIsSet = false;
  m_macIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("ip")) {
    setIp(val.at("ip").get<std::string>());
  }

  if (val.count("secondaryip")) {
    for (auto& item : val["secondaryip"]) {
      PortsSecondaryipJsonObject newItem{ item };
      m_secondaryip.push_back(newItem);
    }

    m_secondaryipIsSet = true;
  }

  if (val.count("mac")) {
    setMac(val.at("mac").get<std::string>());
  }
}

nlohmann::json PortsJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_ipIsSet) {
    val["ip"] = m_ip;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_secondaryip) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["secondaryip"] = jsonArray;
    }
  }

  if (m_macIsSet) {
    val["mac"] = m_mac;
  }

  return val;
}

std::string PortsJsonObject::getName() const {
  return m_name;
}

void PortsJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool PortsJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



std::string PortsJsonObject::getIp() const {
  return m_ip;
}

void PortsJsonObject::setIp(std::string value) {
  m_ip = value;
  m_ipIsSet = true;
}

bool PortsJsonObject::ipIsSet() const {
  return m_ipIsSet;
}

void PortsJsonObject::unsetIp() {
  m_ipIsSet = false;
}

const std::vector<PortsSecondaryipJsonObject>& PortsJsonObject::getSecondaryip() const{
  return m_secondaryip;
}

void PortsJsonObject::addPortsSecondaryip(PortsSecondaryipJsonObject value) {
  m_secondaryip.push_back(value);
  m_secondaryipIsSet = true;
}


bool PortsJsonObject::secondaryipIsSet() const {
  return m_secondaryipIsSet;
}

void PortsJsonObject::unsetSecondaryip() {
  m_secondaryipIsSet = false;
}

std::string PortsJsonObject::getMac() const {
  return m_mac;
}

void PortsJsonObject::setMac(std::string value) {
  m_mac = value;
  m_macIsSet = true;
}

bool PortsJsonObject::macIsSet() const {
  return m_macIsSet;
}

void PortsJsonObject::unsetMac() {
  m_macIsSet = false;
}


}
}
}

