/**
* router API generated from router.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "RouteJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

RouteJsonObject::RouteJsonObject() {
  m_networkIsSet = false;
  m_nexthopIsSet = false;
  m_interfaceIsSet = false;
  m_pathcostIsSet = false;
}

RouteJsonObject::RouteJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_networkIsSet = false;
  m_nexthopIsSet = false;
  m_interfaceIsSet = false;
  m_pathcostIsSet = false;


  if (val.count("network")) {
    setNetwork(val.at("network").get<std::string>());
  }

  if (val.count("nexthop")) {
    setNexthop(val.at("nexthop").get<std::string>());
  }

  if (val.count("interface")) {
    setInterface(val.at("interface").get<std::string>());
  }

  if (val.count("pathcost")) {
    setPathcost(val.at("pathcost").get<uint32_t>());
  }
}

nlohmann::json RouteJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_networkIsSet) {
    val["network"] = m_network;
  }

  if (m_nexthopIsSet) {
    val["nexthop"] = m_nexthop;
  }

  if (m_interfaceIsSet) {
    val["interface"] = m_interface;
  }

  if (m_pathcostIsSet) {
    val["pathcost"] = m_pathcost;
  }

  return val;
}

std::string RouteJsonObject::getNetwork() const {
  return m_network;
}

void RouteJsonObject::setNetwork(std::string value) {
  m_network = value;
  m_networkIsSet = true;
}

bool RouteJsonObject::networkIsSet() const {
  return m_networkIsSet;
}



std::string RouteJsonObject::getNexthop() const {
  return m_nexthop;
}

void RouteJsonObject::setNexthop(std::string value) {
  m_nexthop = value;
  m_nexthopIsSet = true;
}

bool RouteJsonObject::nexthopIsSet() const {
  return m_nexthopIsSet;
}



std::string RouteJsonObject::getInterface() const {
  return m_interface;
}

void RouteJsonObject::setInterface(std::string value) {
  m_interface = value;
  m_interfaceIsSet = true;
}

bool RouteJsonObject::interfaceIsSet() const {
  return m_interfaceIsSet;
}

void RouteJsonObject::unsetInterface() {
  m_interfaceIsSet = false;
}

uint32_t RouteJsonObject::getPathcost() const {
  return m_pathcost;
}

void RouteJsonObject::setPathcost(uint32_t value) {
  m_pathcost = value;
  m_pathcostIsSet = true;
}

bool RouteJsonObject::pathcostIsSet() const {
  return m_pathcostIsSet;
}

void RouteJsonObject::unsetPathcost() {
  m_pathcostIsSet = false;
}


}
}
}

