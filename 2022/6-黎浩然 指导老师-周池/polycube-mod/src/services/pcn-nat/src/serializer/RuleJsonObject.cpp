/**
* nat API
* nat API generated from nat.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "RuleJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

RuleJsonObject::RuleJsonObject() {
  m_snatIsSet = false;
  m_masqueradeIsSet = false;
  m_dnatIsSet = false;
  m_portForwardingIsSet = false;
}

RuleJsonObject::RuleJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_snatIsSet = false;
  m_masqueradeIsSet = false;
  m_dnatIsSet = false;
  m_portForwardingIsSet = false;


  if (val.count("snat")) {
    if (!val["snat"].is_null()) {
      RuleSnatJsonObject newItem { val["snat"] };
      setSnat(newItem);
    }
  }

  if (val.count("masquerade")) {
    if (!val["masquerade"].is_null()) {
      RuleMasqueradeJsonObject newItem { val["masquerade"] };
      setMasquerade(newItem);
    }
  }

  if (val.count("dnat")) {
    if (!val["dnat"].is_null()) {
      RuleDnatJsonObject newItem { val["dnat"] };
      setDnat(newItem);
    }
  }

  if (val.count("port-forwarding")) {
    if (!val["port-forwarding"].is_null()) {
      RulePortForwardingJsonObject newItem { val["port-forwarding"] };
      setPortForwarding(newItem);
    }
  }
}

nlohmann::json RuleJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_snatIsSet) {
    val["snat"] = JsonObjectBase::toJson(m_snat);
  }

  if (m_masqueradeIsSet) {
    val["masquerade"] = JsonObjectBase::toJson(m_masquerade);
  }

  if (m_dnatIsSet) {
    val["dnat"] = JsonObjectBase::toJson(m_dnat);
  }

  if (m_portForwardingIsSet) {
    val["port-forwarding"] = JsonObjectBase::toJson(m_portForwarding);
  }

  return val;
}

RuleSnatJsonObject RuleJsonObject::getSnat() const {
  return m_snat;
}

void RuleJsonObject::setSnat(RuleSnatJsonObject value) {
  m_snat = value;
  m_snatIsSet = true;
}

bool RuleJsonObject::snatIsSet() const {
  return m_snatIsSet;
}

void RuleJsonObject::unsetSnat() {
  m_snatIsSet = false;
}

RuleMasqueradeJsonObject RuleJsonObject::getMasquerade() const {
  return m_masquerade;
}

void RuleJsonObject::setMasquerade(RuleMasqueradeJsonObject value) {
  m_masquerade = value;
  m_masqueradeIsSet = true;
}

bool RuleJsonObject::masqueradeIsSet() const {
  return m_masqueradeIsSet;
}

void RuleJsonObject::unsetMasquerade() {
  m_masqueradeIsSet = false;
}

RuleDnatJsonObject RuleJsonObject::getDnat() const {
  return m_dnat;
}

void RuleJsonObject::setDnat(RuleDnatJsonObject value) {
  m_dnat = value;
  m_dnatIsSet = true;
}

bool RuleJsonObject::dnatIsSet() const {
  return m_dnatIsSet;
}

void RuleJsonObject::unsetDnat() {
  m_dnatIsSet = false;
}

RulePortForwardingJsonObject RuleJsonObject::getPortForwarding() const {
  return m_portForwarding;
}

void RuleJsonObject::setPortForwarding(RulePortForwardingJsonObject value) {
  m_portForwarding = value;
  m_portForwardingIsSet = true;
}

bool RuleJsonObject::portForwardingIsSet() const {
  return m_portForwardingIsSet;
}

void RuleJsonObject::unsetPortForwarding() {
  m_portForwardingIsSet = false;
}


}
}
}
}

