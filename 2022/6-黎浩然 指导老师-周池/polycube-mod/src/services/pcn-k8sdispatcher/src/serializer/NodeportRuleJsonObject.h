/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* NodeportRuleJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"


namespace polycube {
namespace service {
namespace model {

#ifndef L4PROTOENUM
#define L4PROTOENUM
enum class L4ProtoEnum {
  TCP, UDP, ICMP
};
#endif
enum class NodeportRuleExternalTrafficPolicyEnum {
  LOCAL, CLUSTER
};

/// <summary>
///
/// </summary>
class  NodeportRuleJsonObject : public JsonObjectBase {
public:
  NodeportRuleJsonObject();
  NodeportRuleJsonObject(const nlohmann::json &json);
  ~NodeportRuleJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// NodePort rule nodeport port number
  /// </summary>
  uint16_t getNodeportPort() const;
  void setNodeportPort(uint16_t value);
  bool nodeportPortIsSet() const;

  /// <summary>
  /// NodePort rule L4 protocol
  /// </summary>
  L4ProtoEnum getProto() const;
  void setProto(L4ProtoEnum value);
  bool protoIsSet() const;
  static std::string L4ProtoEnum_to_string(const L4ProtoEnum &value);
  static L4ProtoEnum string_to_L4ProtoEnum(const std::string &str);

  /// <summary>
  /// The external traffic policy of the Kubernetes NodePort Service
  /// </summary>
  NodeportRuleExternalTrafficPolicyEnum getExternalTrafficPolicy() const;
  void setExternalTrafficPolicy(NodeportRuleExternalTrafficPolicyEnum value);
  bool externalTrafficPolicyIsSet() const;
  void unsetExternalTrafficPolicy();
  static std::string NodeportRuleExternalTrafficPolicyEnum_to_string(const NodeportRuleExternalTrafficPolicyEnum &value);
  static NodeportRuleExternalTrafficPolicyEnum string_to_NodeportRuleExternalTrafficPolicyEnum(const std::string &str);

  /// <summary>
  /// An optional name for the NodePort rule
  /// </summary>
  std::string getRuleName() const;
  void setRuleName(std::string value);
  bool ruleNameIsSet() const;
  void unsetRuleName();

private:
  uint16_t m_nodeportPort;
  bool m_nodeportPortIsSet;
  L4ProtoEnum m_proto;
  bool m_protoIsSet;
  NodeportRuleExternalTrafficPolicyEnum m_externalTrafficPolicy;
  bool m_externalTrafficPolicyIsSet;
  std::string m_ruleName;
  bool m_ruleNameIsSet;
};

}
}
}

