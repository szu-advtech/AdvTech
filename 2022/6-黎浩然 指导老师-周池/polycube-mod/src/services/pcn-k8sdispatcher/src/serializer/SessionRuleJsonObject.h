/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* SessionRuleJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"


namespace polycube {
namespace service {
namespace model {

enum class SessionRuleDirectionEnum {
  INGRESS, EGRESS
};
#ifndef L4PROTOENUM
#define L4PROTOENUM
enum class L4ProtoEnum {
  TCP, UDP, ICMP
};
#endif
enum class SessionRuleOperationEnum {
  XLATE_SRC, XLATE_DST
};
enum class SessionRuleOriginatingRuleEnum {
  POD_TO_EXT, NODEPORT_CLUSTER
};

/// <summary>
///
/// </summary>
class  SessionRuleJsonObject : public JsonObjectBase {
public:
  SessionRuleJsonObject();
  SessionRuleJsonObject(const nlohmann::json &json);
  ~SessionRuleJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Session entry direction (e.g. INGRESS or EGRESS)
  /// </summary>
  SessionRuleDirectionEnum getDirection() const;
  void setDirection(SessionRuleDirectionEnum value);
  bool directionIsSet() const;
  static std::string SessionRuleDirectionEnum_to_string(const SessionRuleDirectionEnum &value);
  static SessionRuleDirectionEnum string_to_SessionRuleDirectionEnum(const std::string &str);

  /// <summary>
  /// Session entry source IP address
  /// </summary>
  std::string getSrcIp() const;
  void setSrcIp(std::string value);
  bool srcIpIsSet() const;

  /// <summary>
  /// Session entry destination IP address
  /// </summary>
  std::string getDstIp() const;
  void setDstIp(std::string value);
  bool dstIpIsSet() const;

  /// <summary>
  /// Session entry source L4 port number
  /// </summary>
  uint16_t getSrcPort() const;
  void setSrcPort(uint16_t value);
  bool srcPortIsSet() const;

  /// <summary>
  /// Session entry destination L4 port number
  /// </summary>
  uint16_t getDstPort() const;
  void setDstPort(uint16_t value);
  bool dstPortIsSet() const;

  /// <summary>
  /// Session entry L4 protocol
  /// </summary>
  L4ProtoEnum getProto() const;
  void setProto(L4ProtoEnum value);
  bool protoIsSet() const;
  static std::string L4ProtoEnum_to_string(const L4ProtoEnum &value);
  static L4ProtoEnum string_to_L4ProtoEnum(const std::string &str);

  /// <summary>
  /// Translated IP address
  /// </summary>
  std::string getNewIp() const;
  void setNewIp(std::string value);
  bool newIpIsSet() const;
  void unsetNewIp();

  /// <summary>
  /// Translated L4 port number
  /// </summary>
  uint16_t getNewPort() const;
  void setNewPort(uint16_t value);
  bool newPortIsSet() const;
  void unsetNewPort();

  /// <summary>
  /// Operation applied on the original packet
  /// </summary>
  SessionRuleOperationEnum getOperation() const;
  void setOperation(SessionRuleOperationEnum value);
  bool operationIsSet() const;
  void unsetOperation();
  static std::string SessionRuleOperationEnum_to_string(const SessionRuleOperationEnum &value);
  static SessionRuleOperationEnum string_to_SessionRuleOperationEnum(const std::string &str);

  /// <summary>
  /// Rule originating the session entry
  /// </summary>
  SessionRuleOriginatingRuleEnum getOriginatingRule() const;
  void setOriginatingRule(SessionRuleOriginatingRuleEnum value);
  bool originatingRuleIsSet() const;
  void unsetOriginatingRule();
  static std::string SessionRuleOriginatingRuleEnum_to_string(const SessionRuleOriginatingRuleEnum &value);
  static SessionRuleOriginatingRuleEnum string_to_SessionRuleOriginatingRuleEnum(const std::string &str);

private:
  SessionRuleDirectionEnum m_direction;
  bool m_directionIsSet;
  std::string m_srcIp;
  bool m_srcIpIsSet;
  std::string m_dstIp;
  bool m_dstIpIsSet;
  uint16_t m_srcPort;
  bool m_srcPortIsSet;
  uint16_t m_dstPort;
  bool m_dstPortIsSet;
  L4ProtoEnum m_proto;
  bool m_protoIsSet;
  std::string m_newIp;
  bool m_newIpIsSet;
  uint16_t m_newPort;
  bool m_newPortIsSet;
  SessionRuleOperationEnum m_operation;
  bool m_operationIsSet;
  SessionRuleOriginatingRuleEnum m_originatingRule;
  bool m_originatingRuleIsSet;
};

}
}
}

