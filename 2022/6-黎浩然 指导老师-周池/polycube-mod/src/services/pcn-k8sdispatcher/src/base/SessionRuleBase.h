/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* SessionRuleBase.h
*
*
*/

#pragma once

#include "../serializer/SessionRuleJsonObject.h"






#include <spdlog/spdlog.h>

using namespace polycube::service::model;

class K8sdispatcher;

class SessionRuleBase {
 public:
  
  SessionRuleBase(K8sdispatcher &parent);
  
  virtual ~SessionRuleBase();
  virtual void update(const SessionRuleJsonObject &conf);
  virtual SessionRuleJsonObject toJsonObject();

  /// <summary>
  /// Session entry direction (e.g. INGRESS or EGRESS)
  /// </summary>
  virtual SessionRuleDirectionEnum getDirection() = 0;

  /// <summary>
  /// Session entry source IP address
  /// </summary>
  virtual std::string getSrcIp() = 0;

  /// <summary>
  /// Session entry destination IP address
  /// </summary>
  virtual std::string getDstIp() = 0;

  /// <summary>
  /// Session entry source L4 port number
  /// </summary>
  virtual uint16_t getSrcPort() = 0;

  /// <summary>
  /// Session entry destination L4 port number
  /// </summary>
  virtual uint16_t getDstPort() = 0;

  /// <summary>
  /// Session entry L4 protocol
  /// </summary>
  virtual L4ProtoEnum getProto() = 0;

  /// <summary>
  /// Translated IP address
  /// </summary>
  virtual std::string getNewIp() = 0;

  /// <summary>
  /// Translated L4 port number
  /// </summary>
  virtual uint16_t getNewPort() = 0;

  /// <summary>
  /// Operation applied on the original packet
  /// </summary>
  virtual SessionRuleOperationEnum getOperation() = 0;

  /// <summary>
  /// Rule originating the session entry
  /// </summary>
  virtual SessionRuleOriginatingRuleEnum getOriginatingRule() = 0;

  std::shared_ptr<spdlog::logger> logger();
 protected:
  K8sdispatcher &parent_;
};
