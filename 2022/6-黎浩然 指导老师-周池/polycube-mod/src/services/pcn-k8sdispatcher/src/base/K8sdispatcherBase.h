/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* K8sdispatcherBase.h
*
*
*/

#pragma once

#include "../serializer/K8sdispatcherJsonObject.h"

#include "../NodeportRule.h"
#include "../Ports.h"
#include "../SessionRule.h"

#include "polycube/services/cube.h"
#include "polycube/services/port.h"



#include "polycube/services/utils.h"
#include "polycube/services/fifo_map.hpp"

#include <spdlog/spdlog.h>

using namespace polycube::service::model;


class K8sdispatcherBase: public virtual polycube::service::Cube<Ports> {
 public:
  K8sdispatcherBase(const std::string name);

  virtual ~K8sdispatcherBase();
  virtual void update(const K8sdispatcherJsonObject &conf);
  virtual K8sdispatcherJsonObject toJsonObject();

  /// <summary>
  /// Entry of the ports table
  /// </summary>
  virtual std::shared_ptr<Ports> getPorts(const std::string &name);
  virtual std::vector<std::shared_ptr<Ports>> getPortsList();
  virtual void addPorts(const std::string &name, const PortsJsonObject &conf);
  virtual void addPortsList(const std::vector<PortsJsonObject> &conf);
  virtual void replacePorts(const std::string &name, const PortsJsonObject &conf);
  virtual void delPorts(const std::string &name);
  virtual void delPortsList();

  /// <summary>
  /// Internal source IP address used for natting incoming packets directed to Kubernetes Services with a CLUSTER external traffic policy
  /// </summary>
  virtual std::string getInternalSrcIp() = 0;

  /// <summary>
  /// Port range used for NodePort Services
  /// </summary>
  virtual std::string getNodeportRange() = 0;
  virtual void setNodeportRange(const std::string &value) = 0;

  /// <summary>
  /// Session entry related to a specific traffic direction
  /// </summary>
  virtual std::shared_ptr<SessionRule> getSessionRule(const SessionRuleDirectionEnum &direction, const std::string &srcIp, const std::string &dstIp, const uint16_t &srcPort, const uint16_t &dstPort, const L4ProtoEnum &proto) = 0;
  virtual std::vector<std::shared_ptr<SessionRule>> getSessionRuleList() = 0;
  virtual void addSessionRule(const SessionRuleDirectionEnum &direction, const std::string &srcIp, const std::string &dstIp, const uint16_t &srcPort, const uint16_t &dstPort, const L4ProtoEnum &proto, const SessionRuleJsonObject &conf) = 0;
  virtual void addSessionRuleList(const std::vector<SessionRuleJsonObject> &conf);
  virtual void replaceSessionRule(const SessionRuleDirectionEnum &direction, const std::string &srcIp, const std::string &dstIp, const uint16_t &srcPort, const uint16_t &dstPort, const L4ProtoEnum &proto, const SessionRuleJsonObject &conf);
  virtual void delSessionRule(const SessionRuleDirectionEnum &direction,const std::string &srcIp,const std::string &dstIp,const uint16_t &srcPort,const uint16_t &dstPort,const L4ProtoEnum &proto) = 0;
  virtual void delSessionRuleList();

  /// <summary>
  /// NodePort rule associated with a Kubernetes NodePort Service
  /// </summary>
  virtual std::shared_ptr<NodeportRule> getNodeportRule(const uint16_t &nodeportPort, const L4ProtoEnum &proto) = 0;
  virtual std::vector<std::shared_ptr<NodeportRule>> getNodeportRuleList() = 0;
  virtual void addNodeportRule(const uint16_t &nodeportPort, const L4ProtoEnum &proto, const NodeportRuleJsonObject &conf) = 0;
  virtual void addNodeportRuleList(const std::vector<NodeportRuleJsonObject> &conf);
  virtual void updateNodeportRuleList(const std::vector<NodeportRuleJsonObject> &conf) = 0;
  virtual void replaceNodeportRule(const uint16_t &nodeportPort, const L4ProtoEnum &proto, const NodeportRuleJsonObject &conf);
  virtual void replaceNodeportRuleList(const std::vector<NodeportRuleJsonObject> &conf) = 0;
  virtual void delNodeportRule(const uint16_t &nodeportPort,const L4ProtoEnum &proto) = 0;
  virtual void delNodeportRuleList();
};
