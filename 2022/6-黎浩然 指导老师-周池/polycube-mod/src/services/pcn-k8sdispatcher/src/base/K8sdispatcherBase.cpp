/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "K8sdispatcherBase.h"

K8sdispatcherBase::K8sdispatcherBase(const std::string name) {
  logger()->set_pattern("[%Y-%m-%d %H:%M:%S.%e] [K8sdispatcher] [%n] [%l] %v");
}



K8sdispatcherBase::~K8sdispatcherBase() {}

void K8sdispatcherBase::update(const K8sdispatcherJsonObject &conf) {
  set_conf(conf.getBase());

  if (conf.portsIsSet()) {
    for (auto &i : conf.getPorts()) {
      auto name = i.getName();
      auto m = getPorts(name);
      m->update(i);
    }
  }
  if (conf.nodeportRangeIsSet()) {
    setNodeportRange(conf.getNodeportRange());
  }
  if (conf.sessionRuleIsSet()) {
    for (auto &i : conf.getSessionRule()) {
      auto direction = i.getDirection();
      auto srcIp = i.getSrcIp();
      auto dstIp = i.getDstIp();
      auto srcPort = i.getSrcPort();
      auto dstPort = i.getDstPort();
      auto proto = i.getProto();
      auto m = getSessionRule(direction, srcIp, dstIp, srcPort, dstPort, proto);
      m->update(i);
    }
  }
  if (conf.nodeportRuleIsSet()) {
    for (auto &i : conf.getNodeportRule()) {
      auto nodeportPort = i.getNodeportPort();
      auto proto = i.getProto();
      auto m = getNodeportRule(nodeportPort, proto);
      m->update(i);
    }
  }
}

K8sdispatcherJsonObject K8sdispatcherBase::toJsonObject() {
  K8sdispatcherJsonObject conf;
  conf.setBase(to_json());

  conf.setName(getName());
  for (auto &i : getPortsList()) {
    conf.addPorts(i->toJsonObject());
  }
  conf.setInternalSrcIp(getInternalSrcIp());
  conf.setNodeportRange(getNodeportRange());
  for(auto &i : getSessionRuleList()) {
    conf.addSessionRule(i->toJsonObject());
  }
  for(auto &i : getNodeportRuleList()) {
    conf.addNodeportRule(i->toJsonObject());
  }

  return conf;
}
void K8sdispatcherBase::addPortsList(const std::vector<PortsJsonObject> &conf) {
  for (auto &i : conf) {
    std::string name_ = i.getName();
    addPorts(name_, i);
  }
}

void K8sdispatcherBase::replacePorts(const std::string &name, const PortsJsonObject &conf) {
  delPorts(name);
  std::string name_ = conf.getName();
  addPorts(name_, conf);
}

void K8sdispatcherBase::delPortsList() {
  auto elements = getPortsList();
  for (auto &i : elements) {
    std::string name_ = i->getName();
    delPorts(name_);
  }
}

void K8sdispatcherBase::addPorts(const std::string &name, const PortsJsonObject &conf) {
  add_port<PortsJsonObject>(name, conf);
}

void K8sdispatcherBase::delPorts(const std::string &name) {
  remove_port(name);
}

std::shared_ptr<Ports> K8sdispatcherBase::getPorts(const std::string &name) {
  return get_port(name);
}

std::vector<std::shared_ptr<Ports>> K8sdispatcherBase::getPortsList() {
  return get_ports();
}
void K8sdispatcherBase::addSessionRuleList(const std::vector<SessionRuleJsonObject> &conf) {
  for (auto &i : conf) {
    SessionRuleDirectionEnum direction_ = i.getDirection();
    std::string srcIp_ = i.getSrcIp();
    std::string dstIp_ = i.getDstIp();
    uint16_t srcPort_ = i.getSrcPort();
    uint16_t dstPort_ = i.getDstPort();
    L4ProtoEnum proto_ = i.getProto();
    addSessionRule(direction_, srcIp_, dstIp_, srcPort_, dstPort_, proto_, i);
  }
}

void K8sdispatcherBase::replaceSessionRule(const SessionRuleDirectionEnum &direction, const std::string &srcIp, const std::string &dstIp, const uint16_t &srcPort, const uint16_t &dstPort, const L4ProtoEnum &proto, const SessionRuleJsonObject &conf) {
  delSessionRule(direction, srcIp, dstIp, srcPort, dstPort, proto);
  SessionRuleDirectionEnum direction_ = conf.getDirection();
  std::string srcIp_ = conf.getSrcIp();
  std::string dstIp_ = conf.getDstIp();
  uint16_t srcPort_ = conf.getSrcPort();
  uint16_t dstPort_ = conf.getDstPort();
  L4ProtoEnum proto_ = conf.getProto();
  addSessionRule(direction_, srcIp_, dstIp_, srcPort_, dstPort_, proto_, conf);
}

void K8sdispatcherBase::delSessionRuleList() {
  auto elements = getSessionRuleList();
  for (auto &i : elements) {
    SessionRuleDirectionEnum direction_ = i->getDirection();
    std::string srcIp_ = i->getSrcIp();
    std::string dstIp_ = i->getDstIp();
    uint16_t srcPort_ = i->getSrcPort();
    uint16_t dstPort_ = i->getDstPort();
    L4ProtoEnum proto_ = i->getProto();
    delSessionRule(direction_, srcIp_, dstIp_, srcPort_, dstPort_, proto_);
  }
}
void K8sdispatcherBase::addNodeportRuleList(const std::vector<NodeportRuleJsonObject> &conf) {
  for (auto &i : conf) {
    uint16_t nodeportPort_ = i.getNodeportPort();
    L4ProtoEnum proto_ = i.getProto();
    addNodeportRule(nodeportPort_, proto_, i);
  }
}

void K8sdispatcherBase::replaceNodeportRule(const uint16_t &nodeportPort, const L4ProtoEnum &proto, const NodeportRuleJsonObject &conf) {
  delNodeportRule(nodeportPort, proto);
  uint16_t nodeportPort_ = conf.getNodeportPort();
  L4ProtoEnum proto_ = conf.getProto();
  addNodeportRule(nodeportPort_, proto_, conf);
}

void K8sdispatcherBase::delNodeportRuleList() {
  auto elements = getNodeportRuleList();
  for (auto &i : elements) {
    uint16_t nodeportPort_ = i->getNodeportPort();
    L4ProtoEnum proto_ = i->getProto();
    delNodeportRule(nodeportPort_, proto_);
  }
}


