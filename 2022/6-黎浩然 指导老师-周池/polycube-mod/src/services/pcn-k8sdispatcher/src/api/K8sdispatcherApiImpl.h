/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* K8sdispatcherApiImpl.h
*
*
*/

#pragma once


#include <memory>
#include <map>
#include <mutex>
#include "../K8sdispatcher.h"

#include "K8sdispatcherJsonObject.h"
#include "NodeportRuleJsonObject.h"
#include "PortsJsonObject.h"
#include "SessionRuleJsonObject.h"
#include <vector>

namespace polycube {
namespace service {
namespace api {

using namespace polycube::service::model;

namespace K8sdispatcherApiImpl {
  void create_k8sdispatcher_by_id(const std::string &name, const K8sdispatcherJsonObject &value);
  void create_k8sdispatcher_nodeport_rule_by_id(const std::string &name, const uint16_t &nodeportPort, const L4ProtoEnum &proto, const NodeportRuleJsonObject &value);
  void create_k8sdispatcher_nodeport_rule_list_by_id(const std::string &name, const std::vector<NodeportRuleJsonObject> &value);
  void create_k8sdispatcher_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void create_k8sdispatcher_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);
  void delete_k8sdispatcher_by_id(const std::string &name);
  void delete_k8sdispatcher_nodeport_rule_by_id(const std::string &name, const uint16_t &nodeportPort, const L4ProtoEnum &proto);
  void delete_k8sdispatcher_nodeport_rule_list_by_id(const std::string &name);
  void delete_k8sdispatcher_ports_by_id(const std::string &name, const std::string &portsName);
  void delete_k8sdispatcher_ports_list_by_id(const std::string &name);
  K8sdispatcherJsonObject read_k8sdispatcher_by_id(const std::string &name);
  std::string read_k8sdispatcher_internal_src_ip_by_id(const std::string &name);
  std::vector<K8sdispatcherJsonObject> read_k8sdispatcher_list_by_id();
  std::string read_k8sdispatcher_nodeport_range_by_id(const std::string &name);
  NodeportRuleJsonObject read_k8sdispatcher_nodeport_rule_by_id(const std::string &name, const uint16_t &nodeportPort, const L4ProtoEnum &proto);
  NodeportRuleExternalTrafficPolicyEnum read_k8sdispatcher_nodeport_rule_external_traffic_policy_by_id(const std::string &name, const uint16_t &nodeportPort, const L4ProtoEnum &proto);
  std::vector<NodeportRuleJsonObject> read_k8sdispatcher_nodeport_rule_list_by_id(const std::string &name);
  std::string read_k8sdispatcher_nodeport_rule_rule_name_by_id(const std::string &name, const uint16_t &nodeportPort, const L4ProtoEnum &proto);
  PortsJsonObject read_k8sdispatcher_ports_by_id(const std::string &name, const std::string &portsName);
  std::string read_k8sdispatcher_ports_ip_by_id(const std::string &name, const std::string &portsName);
  std::vector<PortsJsonObject> read_k8sdispatcher_ports_list_by_id(const std::string &name);
  PortsTypeEnum read_k8sdispatcher_ports_type_by_id(const std::string &name, const std::string &portsName);
  SessionRuleJsonObject read_k8sdispatcher_session_rule_by_id(const std::string &name, const SessionRuleDirectionEnum &direction, const std::string &srcIp, const std::string &dstIp, const uint16_t &srcPort, const uint16_t &dstPort, const L4ProtoEnum &proto);
  std::vector<SessionRuleJsonObject> read_k8sdispatcher_session_rule_list_by_id(const std::string &name);
  std::string read_k8sdispatcher_session_rule_new_ip_by_id(const std::string &name, const SessionRuleDirectionEnum &direction, const std::string &srcIp, const std::string &dstIp, const uint16_t &srcPort, const uint16_t &dstPort, const L4ProtoEnum &proto);
  uint16_t read_k8sdispatcher_session_rule_new_port_by_id(const std::string &name, const SessionRuleDirectionEnum &direction, const std::string &srcIp, const std::string &dstIp, const uint16_t &srcPort, const uint16_t &dstPort, const L4ProtoEnum &proto);
  SessionRuleOperationEnum read_k8sdispatcher_session_rule_operation_by_id(const std::string &name, const SessionRuleDirectionEnum &direction, const std::string &srcIp, const std::string &dstIp, const uint16_t &srcPort, const uint16_t &dstPort, const L4ProtoEnum &proto);
  SessionRuleOriginatingRuleEnum read_k8sdispatcher_session_rule_originating_rule_by_id(const std::string &name, const SessionRuleDirectionEnum &direction, const std::string &srcIp, const std::string &dstIp, const uint16_t &srcPort, const uint16_t &dstPort, const L4ProtoEnum &proto);
  void replace_k8sdispatcher_by_id(const std::string &name, const K8sdispatcherJsonObject &value);
  void replace_k8sdispatcher_nodeport_rule_by_id(const std::string &name, const uint16_t &nodeportPort, const L4ProtoEnum &proto, const NodeportRuleJsonObject &value);
  void replace_k8sdispatcher_nodeport_rule_list_by_id(const std::string &name, const std::vector<NodeportRuleJsonObject> &value);
  void replace_k8sdispatcher_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void replace_k8sdispatcher_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);
  void update_k8sdispatcher_by_id(const std::string &name, const K8sdispatcherJsonObject &value);
  void update_k8sdispatcher_list_by_id(const std::vector<K8sdispatcherJsonObject> &value);
  void update_k8sdispatcher_nodeport_range_by_id(const std::string &name, const std::string &value);
  void update_k8sdispatcher_nodeport_rule_by_id(const std::string &name, const uint16_t &nodeportPort, const L4ProtoEnum &proto, const NodeportRuleJsonObject &value);
  void update_k8sdispatcher_nodeport_rule_external_traffic_policy_by_id(const std::string &name, const uint16_t &nodeportPort, const L4ProtoEnum &proto, const NodeportRuleExternalTrafficPolicyEnum &value);
  void update_k8sdispatcher_nodeport_rule_list_by_id(const std::string &name, const std::vector<NodeportRuleJsonObject> &value);
  void update_k8sdispatcher_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void update_k8sdispatcher_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);

  /* help related */
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_k8sdispatcher_list_by_id_get_list();
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_k8sdispatcher_nodeport_rule_list_by_id_get_list(const std::string &name);
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_k8sdispatcher_ports_list_by_id_get_list(const std::string &name);
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_k8sdispatcher_session_rule_list_by_id_get_list(const std::string &name);

}
}
}
}

