/**
* k8sfilter API
* k8sfilter API generated from k8sfilter.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "K8sfilterJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

K8sfilterJsonObject::K8sfilterJsonObject() {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_nodeportRange = "30000-32767";
  m_nodeportRangeIsSet = true;
}

K8sfilterJsonObject::K8sfilterJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_nodeportRangeIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("ports")) {
    for (auto& item : val["ports"]) {
      PortsJsonObject newItem{ item };
      m_ports.push_back(newItem);
    }

    m_portsIsSet = true;
  }

  if (val.count("nodeport-range")) {
    setNodeportRange(val.at("nodeport-range").get<std::string>());
  }
}

nlohmann::json K8sfilterJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_ports) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["ports"] = jsonArray;
    }
  }

  if (m_nodeportRangeIsSet) {
    val["nodeport-range"] = m_nodeportRange;
  }

  return val;
}

std::string K8sfilterJsonObject::getName() const {
  return m_name;
}

void K8sfilterJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool K8sfilterJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



const std::vector<PortsJsonObject>& K8sfilterJsonObject::getPorts() const{
  return m_ports;
}

void K8sfilterJsonObject::addPorts(PortsJsonObject value) {
  m_ports.push_back(value);
  m_portsIsSet = true;
}


bool K8sfilterJsonObject::portsIsSet() const {
  return m_portsIsSet;
}

void K8sfilterJsonObject::unsetPorts() {
  m_portsIsSet = false;
}

std::string K8sfilterJsonObject::getNodeportRange() const {
  return m_nodeportRange;
}

void K8sfilterJsonObject::setNodeportRange(std::string value) {
  m_nodeportRange = value;
  m_nodeportRangeIsSet = true;
}

bool K8sfilterJsonObject::nodeportRangeIsSet() const {
  return m_nodeportRangeIsSet;
}

void K8sfilterJsonObject::unsetNodeportRange() {
  m_nodeportRangeIsSet = false;
}


}
}
}
}

