/**
* simpleforwarder API generated from simpleforwarder.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "ActionsJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

ActionsJsonObject::ActionsJsonObject() {
  m_inportIsSet = false;
  m_actionIsSet = false;
  m_outportIsSet = false;
}

ActionsJsonObject::ActionsJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_inportIsSet = false;
  m_actionIsSet = false;
  m_outportIsSet = false;


  if (val.count("inport")) {
    setInport(val.at("inport").get<std::string>());
  }

  if (val.count("action")) {
    setAction(string_to_ActionsActionEnum(val.at("action").get<std::string>()));
  }

  if (val.count("outport")) {
    setOutport(val.at("outport").get<std::string>());
  }
}

nlohmann::json ActionsJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_inportIsSet) {
    val["inport"] = m_inport;
  }

  if (m_actionIsSet) {
    val["action"] = ActionsActionEnum_to_string(m_action);
  }

  if (m_outportIsSet) {
    val["outport"] = m_outport;
  }

  return val;
}

std::string ActionsJsonObject::getInport() const {
  return m_inport;
}

void ActionsJsonObject::setInport(std::string value) {
  m_inport = value;
  m_inportIsSet = true;
}

bool ActionsJsonObject::inportIsSet() const {
  return m_inportIsSet;
}



ActionsActionEnum ActionsJsonObject::getAction() const {
  return m_action;
}

void ActionsJsonObject::setAction(ActionsActionEnum value) {
  m_action = value;
  m_actionIsSet = true;
}

bool ActionsJsonObject::actionIsSet() const {
  return m_actionIsSet;
}



std::string ActionsJsonObject::ActionsActionEnum_to_string(const ActionsActionEnum &value){
  switch(value) {
    case ActionsActionEnum::DROP:
      return std::string("drop");
    case ActionsActionEnum::SLOWPATH:
      return std::string("slowpath");
    case ActionsActionEnum::FORWARD:
      return std::string("forward");
    default:
      throw std::runtime_error("Bad Actions action");
  }
}

ActionsActionEnum ActionsJsonObject::string_to_ActionsActionEnum(const std::string &str){
  if (JsonObjectBase::iequals("drop", str))
    return ActionsActionEnum::DROP;
  if (JsonObjectBase::iequals("slowpath", str))
    return ActionsActionEnum::SLOWPATH;
  if (JsonObjectBase::iequals("forward", str))
    return ActionsActionEnum::FORWARD;
  throw std::runtime_error("Actions action is invalid");
}
std::string ActionsJsonObject::getOutport() const {
  return m_outport;
}

void ActionsJsonObject::setOutport(std::string value) {
  m_outport = value;
  m_outportIsSet = true;
}

bool ActionsJsonObject::outportIsSet() const {
  return m_outportIsSet;
}

void ActionsJsonObject::unsetOutport() {
  m_outportIsSet = false;
}


}
}
}

