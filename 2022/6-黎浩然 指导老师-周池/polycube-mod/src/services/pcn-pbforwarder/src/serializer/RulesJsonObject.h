/**
* pbforwarder API
* pbforwarder API generated from pbforwarder.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* RulesJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"


namespace io {
namespace swagger {
namespace server {
namespace model {

enum class RulesL4ProtoEnum {
  UDP, TCP
};
enum class RulesActionEnum {
  DROP, SLOWPATH, FORWARD
};

/// <summary>
///
/// </summary>
class  RulesJsonObject : public JsonObjectBase {
public:
  RulesJsonObject();
  RulesJsonObject(const nlohmann::json &json);
  ~RulesJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Rule Identifier
  /// </summary>
  uint32_t getId() const;
  void setId(uint32_t value);
  bool idIsSet() const;

  /// <summary>
  /// VLAN Identifier
  /// </summary>
  uint32_t getVlan() const;
  void setVlan(uint32_t value);
  bool vlanIsSet() const;
  void unsetVlan();

  /// <summary>
  /// Source MAC Address in the form AA:BB:CC:DD:EE:FF
  /// </summary>
  std::string getSrcMac() const;
  void setSrcMac(std::string value);
  bool srcMacIsSet() const;
  void unsetSrcMac();

  /// <summary>
  /// Destination MAC Address in the form AA:BB:CC:DD:EE:FF
  /// </summary>
  std::string getDstMac() const;
  void setDstMac(std::string value);
  bool dstMacIsSet() const;
  void unsetDstMac();

  /// <summary>
  /// Source IP Address in the form AA.BB.CC.DD
  /// </summary>
  std::string getSrcIp() const;
  void setSrcIp(std::string value);
  bool srcIpIsSet() const;
  void unsetSrcIp();

  /// <summary>
  /// Destination IP Address in the form AA.BB.CC.DD
  /// </summary>
  std::string getDstIp() const;
  void setDstIp(std::string value);
  bool dstIpIsSet() const;
  void unsetDstIp();

  /// <summary>
  /// Level 4 Protocol (i.e. UDP, TCP)
  /// </summary>
  RulesL4ProtoEnum getL4Proto() const;
  void setL4Proto(RulesL4ProtoEnum value);
  bool l4ProtoIsSet() const;
  void unsetL4Proto();
  static std::string RulesL4ProtoEnum_to_string(const RulesL4ProtoEnum &value);
  static RulesL4ProtoEnum string_to_RulesL4ProtoEnum(const std::string &str);

  /// <summary>
  /// Source L4 Port
  /// </summary>
  uint16_t getSrcPort() const;
  void setSrcPort(uint16_t value);
  bool srcPortIsSet() const;
  void unsetSrcPort();

  /// <summary>
  /// Destination L4 Port
  /// </summary>
  uint16_t getDstPort() const;
  void setDstPort(uint16_t value);
  bool dstPortIsSet() const;
  void unsetDstPort();

  /// <summary>
  /// Ingress port
  /// </summary>
  std::string getInPort() const;
  void setInPort(std::string value);
  bool inPortIsSet() const;
  void unsetInPort();

  /// <summary>
  /// Output port (used only when action is FORWARD)
  /// </summary>
  std::string getOutPort() const;
  void setOutPort(std::string value);
  bool outPortIsSet() const;
  void unsetOutPort();

  /// <summary>
  /// Action associated to the rule(i.e., DROP, SLOWPATH, or FORWARD; default: DROP)
  /// </summary>
  RulesActionEnum getAction() const;
  void setAction(RulesActionEnum value);
  bool actionIsSet() const;
  void unsetAction();
  static std::string RulesActionEnum_to_string(const RulesActionEnum &value);
  static RulesActionEnum string_to_RulesActionEnum(const std::string &str);

private:
  uint32_t m_id;
  bool m_idIsSet;
  uint32_t m_vlan;
  bool m_vlanIsSet;
  std::string m_srcMac;
  bool m_srcMacIsSet;
  std::string m_dstMac;
  bool m_dstMacIsSet;
  std::string m_srcIp;
  bool m_srcIpIsSet;
  std::string m_dstIp;
  bool m_dstIpIsSet;
  RulesL4ProtoEnum m_l4Proto;
  bool m_l4ProtoIsSet;
  uint16_t m_srcPort;
  bool m_srcPortIsSet;
  uint16_t m_dstPort;
  bool m_dstPortIsSet;
  std::string m_inPort;
  bool m_inPortIsSet;
  std::string m_outPort;
  bool m_outPortIsSet;
  RulesActionEnum m_action;
  bool m_actionIsSet;
};

}
}
}
}

