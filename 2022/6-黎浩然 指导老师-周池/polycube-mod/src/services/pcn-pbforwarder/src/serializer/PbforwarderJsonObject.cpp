/**
* pbforwarder API
* pbforwarder API generated from pbforwarder.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "PbforwarderJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

PbforwarderJsonObject::PbforwarderJsonObject() {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_rulesIsSet = false;
}

PbforwarderJsonObject::PbforwarderJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_rulesIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("ports")) {
    for (auto& item : val["ports"]) {
      PortsJsonObject newItem{ item };
      m_ports.push_back(newItem);
    }

    m_portsIsSet = true;
  }

  if (val.count("rules")) {
    for (auto& item : val["rules"]) {
      RulesJsonObject newItem{ item };
      m_rules.push_back(newItem);
    }

    m_rulesIsSet = true;
  }
}

nlohmann::json PbforwarderJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_ports) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["ports"] = jsonArray;
    }
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_rules) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["rules"] = jsonArray;
    }
  }

  return val;
}

std::string PbforwarderJsonObject::getName() const {
  return m_name;
}

void PbforwarderJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool PbforwarderJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



const std::vector<PortsJsonObject>& PbforwarderJsonObject::getPorts() const{
  return m_ports;
}

void PbforwarderJsonObject::addPorts(PortsJsonObject value) {
  m_ports.push_back(value);
  m_portsIsSet = true;
}


bool PbforwarderJsonObject::portsIsSet() const {
  return m_portsIsSet;
}

void PbforwarderJsonObject::unsetPorts() {
  m_portsIsSet = false;
}

const std::vector<RulesJsonObject>& PbforwarderJsonObject::getRules() const{
  return m_rules;
}

void PbforwarderJsonObject::addRules(RulesJsonObject value) {
  m_rules.push_back(value);
  m_rulesIsSet = true;
}


bool PbforwarderJsonObject::rulesIsSet() const {
  return m_rulesIsSet;
}

void PbforwarderJsonObject::unsetRules() {
  m_rulesIsSet = false;
}


}
}
}
}

