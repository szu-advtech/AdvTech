/**
* bridge API generated from bridge.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* PortsStpJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"


namespace polycube {
namespace service {
namespace model {

enum class PortsStpStateEnum {
  DISABLED, BLOCKING, LISTENING, LEARNING, FORWARDING
};

/// <summary>
///
/// </summary>
class  PortsStpJsonObject : public JsonObjectBase {
public:
  PortsStpJsonObject();
  PortsStpJsonObject(const nlohmann::json &json);
  ~PortsStpJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// VLAN identifier for this entry
  /// </summary>
  uint16_t getVlan() const;
  void setVlan(uint16_t value);
  bool vlanIsSet() const;

  /// <summary>
  /// STP port state
  /// </summary>
  PortsStpStateEnum getState() const;
  void setState(PortsStpStateEnum value);
  bool stateIsSet() const;
  void unsetState();
  static std::string PortsStpStateEnum_to_string(const PortsStpStateEnum &value);
  static PortsStpStateEnum string_to_PortsStpStateEnum(const std::string &str);

  /// <summary>
  /// STP cost associated with this interface
  /// </summary>
  uint32_t getPathCost() const;
  void setPathCost(uint32_t value);
  bool pathCostIsSet() const;
  void unsetPathCost();

  /// <summary>
  /// Port priority of this interface
  /// </summary>
  uint8_t getPortPriority() const;
  void setPortPriority(uint8_t value);
  bool portPriorityIsSet() const;
  void unsetPortPriority();

private:
  uint16_t m_vlan;
  bool m_vlanIsSet;
  PortsStpStateEnum m_state;
  bool m_stateIsSet;
  uint32_t m_pathCost;
  bool m_pathCostIsSet;
  uint8_t m_portPriority;
  bool m_portPriorityIsSet;
};

}
}
}

