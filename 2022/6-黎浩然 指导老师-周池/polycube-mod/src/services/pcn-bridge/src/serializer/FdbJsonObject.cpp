/**
* bridge API generated from bridge.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "FdbJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

FdbJsonObject::FdbJsonObject() {
  m_agingTimeIsSet = false;
  m_entryIsSet = false;
}

FdbJsonObject::FdbJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_agingTimeIsSet = false;
  m_entryIsSet = false;


  if (val.count("aging-time")) {
    setAgingTime(val.at("aging-time").get<uint32_t>());
  }

  if (val.count("entry")) {
    for (auto& item : val["entry"]) {
      FdbEntryJsonObject newItem{ item };
      m_entry.push_back(newItem);
    }

    m_entryIsSet = true;
  }
}

nlohmann::json FdbJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_agingTimeIsSet) {
    val["aging-time"] = m_agingTime;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_entry) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["entry"] = jsonArray;
    }
  }

  return val;
}

uint32_t FdbJsonObject::getAgingTime() const {
  return m_agingTime;
}

void FdbJsonObject::setAgingTime(uint32_t value) {
  m_agingTime = value;
  m_agingTimeIsSet = true;
}

bool FdbJsonObject::agingTimeIsSet() const {
  return m_agingTimeIsSet;
}

void FdbJsonObject::unsetAgingTime() {
  m_agingTimeIsSet = false;
}

const std::vector<FdbEntryJsonObject>& FdbJsonObject::getEntry() const{
  return m_entry;
}

void FdbJsonObject::addFdbEntry(FdbEntryJsonObject value) {
  m_entry.push_back(value);
  m_entryIsSet = true;
}


bool FdbJsonObject::entryIsSet() const {
  return m_entryIsSet;
}

void FdbJsonObject::unsetEntry() {
  m_entryIsSet = false;
}


}
}
}

