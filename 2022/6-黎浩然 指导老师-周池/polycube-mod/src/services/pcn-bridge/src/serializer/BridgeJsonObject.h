/**
* bridge API generated from bridge.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* BridgeJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"

#include "StpJsonObject.h"
#include "PortsJsonObject.h"
#include <vector>
#include "FdbJsonObject.h"
#include "polycube/services/cube.h"

namespace polycube {
namespace service {
namespace model {


/// <summary>
///
/// </summary>
class  BridgeJsonObject : public JsonObjectBase {
public:
  BridgeJsonObject();
  BridgeJsonObject(const nlohmann::json &json);
  ~BridgeJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Name of the bridge service
  /// </summary>
  std::string getName() const;
  void setName(std::string value);
  bool nameIsSet() const;

  /// <summary>
  /// Entry of the ports table
  /// </summary>
  const std::vector<PortsJsonObject>& getPorts() const;
  void addPorts(PortsJsonObject value);
  bool portsIsSet() const;
  void unsetPorts();

  /// <summary>
  ///
  /// </summary>
  FdbJsonObject getFdb() const;
  void setFdb(FdbJsonObject value);
  bool fdbIsSet() const;
  void unsetFdb();

  /// <summary>
  /// Enable/Disable the STP protocol of the bridge
  /// </summary>
  bool getStpEnabled() const;
  void setStpEnabled(bool value);
  bool stpEnabledIsSet() const;
  void unsetStpEnabled();

  /// <summary>
  /// Main MAC address of the bridge used by the STP
  /// </summary>
  std::string getMac() const;
  void setMac(std::string value);
  bool macIsSet() const;
  void unsetMac();

  /// <summary>
  /// Per-vlan Spanning Tree Protocol Configuration
  /// </summary>
  const std::vector<StpJsonObject>& getStp() const;
  void addStp(StpJsonObject value);
  bool stpIsSet() const;
  void unsetStp();

private:
  std::string m_name;
  bool m_nameIsSet;
  std::vector<PortsJsonObject> m_ports;
  bool m_portsIsSet;
  FdbJsonObject m_fdb;
  bool m_fdbIsSet;
  bool m_stpEnabled;
  bool m_stpEnabledIsSet;
  std::string m_mac;
  bool m_macIsSet;
  std::vector<StpJsonObject> m_stp;
  bool m_stpIsSet;
};

}
}
}

