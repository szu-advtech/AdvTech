/**
* bridge API generated from bridge.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "BridgeJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

BridgeJsonObject::BridgeJsonObject() {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_fdbIsSet = false;
  m_stpEnabled = false;
  m_stpEnabledIsSet = true;
  m_macIsSet = false;
  m_stpIsSet = false;
}

BridgeJsonObject::BridgeJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_fdbIsSet = false;
  m_stpEnabledIsSet = false;
  m_macIsSet = false;
  m_stpIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("ports")) {
    for (auto& item : val["ports"]) {
      PortsJsonObject newItem{ item };
      m_ports.push_back(newItem);
    }

    m_portsIsSet = true;
  }

  if (val.count("fdb")) {
    if (!val["fdb"].is_null()) {
      FdbJsonObject newItem { val["fdb"] };
      setFdb(newItem);
    }
  }

  if (val.count("stp-enabled")) {
    setStpEnabled(val.at("stp-enabled").get<bool>());
  }

  if (val.count("mac")) {
    setMac(val.at("mac").get<std::string>());
  }

  if (val.count("stp")) {
    for (auto& item : val["stp"]) {
      StpJsonObject newItem{ item };
      m_stp.push_back(newItem);
    }

    m_stpIsSet = true;
  }
}

nlohmann::json BridgeJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_ports) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["ports"] = jsonArray;
    }
  }

  if (m_fdbIsSet) {
    val["fdb"] = JsonObjectBase::toJson(m_fdb);
  }

  if (m_stpEnabledIsSet) {
    val["stp-enabled"] = m_stpEnabled;
  }

  if (m_macIsSet) {
    val["mac"] = m_mac;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_stp) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["stp"] = jsonArray;
    }
  }

  return val;
}

std::string BridgeJsonObject::getName() const {
  return m_name;
}

void BridgeJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool BridgeJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



const std::vector<PortsJsonObject>& BridgeJsonObject::getPorts() const{
  return m_ports;
}

void BridgeJsonObject::addPorts(PortsJsonObject value) {
  m_ports.push_back(value);
  m_portsIsSet = true;
}


bool BridgeJsonObject::portsIsSet() const {
  return m_portsIsSet;
}

void BridgeJsonObject::unsetPorts() {
  m_portsIsSet = false;
}

FdbJsonObject BridgeJsonObject::getFdb() const {
  return m_fdb;
}

void BridgeJsonObject::setFdb(FdbJsonObject value) {
  m_fdb = value;
  m_fdbIsSet = true;
}

bool BridgeJsonObject::fdbIsSet() const {
  return m_fdbIsSet;
}

void BridgeJsonObject::unsetFdb() {
  m_fdbIsSet = false;
}

bool BridgeJsonObject::getStpEnabled() const {
  return m_stpEnabled;
}

void BridgeJsonObject::setStpEnabled(bool value) {
  m_stpEnabled = value;
  m_stpEnabledIsSet = true;
}

bool BridgeJsonObject::stpEnabledIsSet() const {
  return m_stpEnabledIsSet;
}

void BridgeJsonObject::unsetStpEnabled() {
  m_stpEnabledIsSet = false;
}

std::string BridgeJsonObject::getMac() const {
  return m_mac;
}

void BridgeJsonObject::setMac(std::string value) {
  m_mac = value;
  m_macIsSet = true;
}

bool BridgeJsonObject::macIsSet() const {
  return m_macIsSet;
}

void BridgeJsonObject::unsetMac() {
  m_macIsSet = false;
}

const std::vector<StpJsonObject>& BridgeJsonObject::getStp() const{
  return m_stp;
}

void BridgeJsonObject::addStp(StpJsonObject value) {
  m_stp.push_back(value);
  m_stpIsSet = true;
}


bool BridgeJsonObject::stpIsSet() const {
  return m_stpIsSet;
}

void BridgeJsonObject::unsetStp() {
  m_stpIsSet = false;
}


}
}
}

