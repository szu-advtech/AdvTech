/**
* bridge API generated from bridge.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "StpJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

StpJsonObject::StpJsonObject() {
  m_vlanIsSet = false;
  m_priorityIsSet = false;
  m_forwardDelayIsSet = false;
  m_helloTimeIsSet = false;
  m_maxMessageAgeIsSet = false;
}

StpJsonObject::StpJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_vlanIsSet = false;
  m_priorityIsSet = false;
  m_forwardDelayIsSet = false;
  m_helloTimeIsSet = false;
  m_maxMessageAgeIsSet = false;


  if (val.count("vlan")) {
    setVlan(val.at("vlan").get<uint16_t>());
  }

  if (val.count("priority")) {
    setPriority(val.at("priority").get<uint16_t>());
  }

  if (val.count("forward-delay")) {
    setForwardDelay(val.at("forward-delay").get<uint32_t>());
  }

  if (val.count("hello-time")) {
    setHelloTime(val.at("hello-time").get<uint32_t>());
  }

  if (val.count("max-message-age")) {
    setMaxMessageAge(val.at("max-message-age").get<uint32_t>());
  }
}

nlohmann::json StpJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_vlanIsSet) {
    val["vlan"] = m_vlan;
  }

  if (m_priorityIsSet) {
    val["priority"] = m_priority;
  }

  if (m_forwardDelayIsSet) {
    val["forward-delay"] = m_forwardDelay;
  }

  if (m_helloTimeIsSet) {
    val["hello-time"] = m_helloTime;
  }

  if (m_maxMessageAgeIsSet) {
    val["max-message-age"] = m_maxMessageAge;
  }

  return val;
}

uint16_t StpJsonObject::getVlan() const {
  return m_vlan;
}

void StpJsonObject::setVlan(uint16_t value) {
  m_vlan = value;
  m_vlanIsSet = true;
}

bool StpJsonObject::vlanIsSet() const {
  return m_vlanIsSet;
}



uint16_t StpJsonObject::getPriority() const {
  return m_priority;
}

void StpJsonObject::setPriority(uint16_t value) {
  m_priority = value;
  m_priorityIsSet = true;
}

bool StpJsonObject::priorityIsSet() const {
  return m_priorityIsSet;
}

void StpJsonObject::unsetPriority() {
  m_priorityIsSet = false;
}

uint32_t StpJsonObject::getForwardDelay() const {
  return m_forwardDelay;
}

void StpJsonObject::setForwardDelay(uint32_t value) {
  m_forwardDelay = value;
  m_forwardDelayIsSet = true;
}

bool StpJsonObject::forwardDelayIsSet() const {
  return m_forwardDelayIsSet;
}

void StpJsonObject::unsetForwardDelay() {
  m_forwardDelayIsSet = false;
}

uint32_t StpJsonObject::getHelloTime() const {
  return m_helloTime;
}

void StpJsonObject::setHelloTime(uint32_t value) {
  m_helloTime = value;
  m_helloTimeIsSet = true;
}

bool StpJsonObject::helloTimeIsSet() const {
  return m_helloTimeIsSet;
}

void StpJsonObject::unsetHelloTime() {
  m_helloTimeIsSet = false;
}

uint32_t StpJsonObject::getMaxMessageAge() const {
  return m_maxMessageAge;
}

void StpJsonObject::setMaxMessageAge(uint32_t value) {
  m_maxMessageAge = value;
  m_maxMessageAgeIsSet = true;
}

bool StpJsonObject::maxMessageAgeIsSet() const {
  return m_maxMessageAgeIsSet;
}

void StpJsonObject::unsetMaxMessageAge() {
  m_maxMessageAgeIsSet = false;
}


}
}
}

