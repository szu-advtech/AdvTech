/**
* bridge API generated from bridge.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* PortsJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"

#include "PortsStpJsonObject.h"
#include "PortsAccessJsonObject.h"
#include <vector>
#include "PortsTrunkJsonObject.h"

namespace polycube {
namespace service {
namespace model {

enum class PortsModeEnum {
  ACCESS, TRUNK
};

/// <summary>
///
/// </summary>
class  PortsJsonObject : public JsonObjectBase {
public:
  PortsJsonObject();
  PortsJsonObject(const nlohmann::json &json);
  ~PortsJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Port Name
  /// </summary>
  std::string getName() const;
  void setName(std::string value);
  bool nameIsSet() const;

  /// <summary>
  /// MAC address of the port
  /// </summary>
  std::string getMac() const;
  void setMac(std::string value);
  bool macIsSet() const;
  void unsetMac();

  /// <summary>
  /// Type of bridge interface: access/trunk
  /// </summary>
  PortsModeEnum getMode() const;
  void setMode(PortsModeEnum value);
  bool modeIsSet() const;
  void unsetMode();
  static std::string PortsModeEnum_to_string(const PortsModeEnum &value);
  static PortsModeEnum string_to_PortsModeEnum(const std::string &str);

  /// <summary>
  ///
  /// </summary>
  PortsAccessJsonObject getAccess() const;
  void setAccess(PortsAccessJsonObject value);
  bool accessIsSet() const;
  void unsetAccess();

  /// <summary>
  ///
  /// </summary>
  PortsTrunkJsonObject getTrunk() const;
  void setTrunk(PortsTrunkJsonObject value);
  bool trunkIsSet() const;
  void unsetTrunk();

  /// <summary>
  /// Per-vlan Spanning Tree Protocol Port Configuration
  /// </summary>
  const std::vector<PortsStpJsonObject>& getStp() const;
  void addPortsStp(PortsStpJsonObject value);
  bool stpIsSet() const;
  void unsetStp();

private:
  std::string m_name;
  bool m_nameIsSet;
  std::string m_mac;
  bool m_macIsSet;
  PortsModeEnum m_mode;
  bool m_modeIsSet;
  PortsAccessJsonObject m_access;
  bool m_accessIsSet;
  PortsTrunkJsonObject m_trunk;
  bool m_trunkIsSet;
  std::vector<PortsStpJsonObject> m_stp;
  bool m_stpIsSet;
};

}
}
}

