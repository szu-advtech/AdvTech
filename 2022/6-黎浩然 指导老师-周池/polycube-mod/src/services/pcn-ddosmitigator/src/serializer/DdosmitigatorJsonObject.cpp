/**
* ddosmitigator API
* ddosmitigator API generated from ddosmitigator.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "DdosmitigatorJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

DdosmitigatorJsonObject::DdosmitigatorJsonObject() {
  m_nameIsSet = false;
  m_statsIsSet = false;
  m_blacklistSrcIsSet = false;
  m_blacklistDstIsSet = false;
}

DdosmitigatorJsonObject::DdosmitigatorJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_statsIsSet = false;
  m_blacklistSrcIsSet = false;
  m_blacklistDstIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("stats")) {
    if (!val["stats"].is_null()) {
      StatsJsonObject newItem { val["stats"] };
      setStats(newItem);
    }
  }

  if (val.count("blacklist-src")) {
    for (auto& item : val["blacklist-src"]) {
      BlacklistSrcJsonObject newItem{ item };
      m_blacklistSrc.push_back(newItem);
    }

    m_blacklistSrcIsSet = true;
  }

  if (val.count("blacklist-dst")) {
    for (auto& item : val["blacklist-dst"]) {
      BlacklistDstJsonObject newItem{ item };
      m_blacklistDst.push_back(newItem);
    }

    m_blacklistDstIsSet = true;
  }
}

nlohmann::json DdosmitigatorJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_statsIsSet) {
    val["stats"] = JsonObjectBase::toJson(m_stats);
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_blacklistSrc) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["blacklist-src"] = jsonArray;
    }
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_blacklistDst) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["blacklist-dst"] = jsonArray;
    }
  }

  return val;
}

std::string DdosmitigatorJsonObject::getName() const {
  return m_name;
}

void DdosmitigatorJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool DdosmitigatorJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



StatsJsonObject DdosmitigatorJsonObject::getStats() const {
  return m_stats;
}

void DdosmitigatorJsonObject::setStats(StatsJsonObject value) {
  m_stats = value;
  m_statsIsSet = true;
}

bool DdosmitigatorJsonObject::statsIsSet() const {
  return m_statsIsSet;
}

void DdosmitigatorJsonObject::unsetStats() {
  m_statsIsSet = false;
}

const std::vector<BlacklistSrcJsonObject>& DdosmitigatorJsonObject::getBlacklistSrc() const{
  return m_blacklistSrc;
}

void DdosmitigatorJsonObject::addBlacklistSrc(BlacklistSrcJsonObject value) {
  m_blacklistSrc.push_back(value);
  m_blacklistSrcIsSet = true;
}


bool DdosmitigatorJsonObject::blacklistSrcIsSet() const {
  return m_blacklistSrcIsSet;
}

void DdosmitigatorJsonObject::unsetBlacklistSrc() {
  m_blacklistSrcIsSet = false;
}

const std::vector<BlacklistDstJsonObject>& DdosmitigatorJsonObject::getBlacklistDst() const{
  return m_blacklistDst;
}

void DdosmitigatorJsonObject::addBlacklistDst(BlacklistDstJsonObject value) {
  m_blacklistDst.push_back(value);
  m_blacklistDstIsSet = true;
}


bool DdosmitigatorJsonObject::blacklistDstIsSet() const {
  return m_blacklistDstIsSet;
}

void DdosmitigatorJsonObject::unsetBlacklistDst() {
  m_blacklistDstIsSet = false;
}


}
}
}
}

