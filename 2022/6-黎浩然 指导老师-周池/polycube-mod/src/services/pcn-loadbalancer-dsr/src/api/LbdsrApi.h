/**
* lbdsr API
* lbdsr API generated from lbdsr.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* LbdsrApi.h
*
*/

#pragma once

#define POLYCUBE_SERVICE_NAME "lbdsr"


#include "polycube/services/response.h"
#include "polycube/services/shared_lib_elements.h"

#include "BackendJsonObject.h"
#include "BackendPoolJsonObject.h"
#include "FrontendJsonObject.h"
#include "LbdsrJsonObject.h"
#include "PortsJsonObject.h"
#include <vector>


#ifdef __cplusplus
extern "C" {
#endif

Response create_lbdsr_backend_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_lbdsr_backend_pool_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_lbdsr_backend_pool_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_lbdsr_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_lbdsr_frontend_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_lbdsr_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_lbdsr_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response delete_lbdsr_backend_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_lbdsr_backend_pool_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_lbdsr_backend_pool_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_lbdsr_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_lbdsr_frontend_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_lbdsr_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_lbdsr_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_lbdsr_algorithm_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_lbdsr_backend_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_lbdsr_backend_pool_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_lbdsr_backend_pool_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_lbdsr_backend_pool_mac_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_lbdsr_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_lbdsr_frontend_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_lbdsr_frontend_mac_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_lbdsr_frontend_vip_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_lbdsr_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_lbdsr_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_lbdsr_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_lbdsr_ports_type_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response replace_lbdsr_backend_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_lbdsr_backend_pool_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_lbdsr_backend_pool_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_lbdsr_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_lbdsr_frontend_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_lbdsr_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_lbdsr_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_lbdsr_algorithm_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_lbdsr_backend_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_lbdsr_backend_pool_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_lbdsr_backend_pool_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_lbdsr_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_lbdsr_frontend_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_lbdsr_frontend_mac_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_lbdsr_frontend_vip_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_lbdsr_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_lbdsr_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_lbdsr_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_lbdsr_ports_type_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);

Response lbdsr_backend_pool_list_by_id_help(const char *name, const Key *keys, size_t num_keys);
Response lbdsr_list_by_id_help(const char *name, const Key *keys, size_t num_keys);
Response lbdsr_ports_list_by_id_help(const char *name, const Key *keys, size_t num_keys);


#ifdef __cplusplus
}
#endif

