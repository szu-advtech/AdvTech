/**
* lbdsr API
* lbdsr API generated from lbdsr.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "LbdsrJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

LbdsrJsonObject::LbdsrJsonObject() {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_algorithmIsSet = false;
  m_frontendIsSet = false;
  m_backendIsSet = false;
}

LbdsrJsonObject::LbdsrJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_algorithmIsSet = false;
  m_frontendIsSet = false;
  m_backendIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("ports")) {
    for (auto& item : val["ports"]) {
      PortsJsonObject newItem{ item };
      m_ports.push_back(newItem);
    }

    m_portsIsSet = true;
  }

  if (val.count("algorithm")) {
    setAlgorithm(val.at("algorithm").get<std::string>());
  }

  if (val.count("frontend")) {
    if (!val["frontend"].is_null()) {
      FrontendJsonObject newItem { val["frontend"] };
      setFrontend(newItem);
    }
  }

  if (val.count("backend")) {
    if (!val["backend"].is_null()) {
      BackendJsonObject newItem { val["backend"] };
      setBackend(newItem);
    }
  }
}

nlohmann::json LbdsrJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_ports) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["ports"] = jsonArray;
    }
  }

  if (m_algorithmIsSet) {
    val["algorithm"] = m_algorithm;
  }

  if (m_frontendIsSet) {
    val["frontend"] = JsonObjectBase::toJson(m_frontend);
  }

  if (m_backendIsSet) {
    val["backend"] = JsonObjectBase::toJson(m_backend);
  }

  return val;
}

std::string LbdsrJsonObject::getName() const {
  return m_name;
}

void LbdsrJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool LbdsrJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



const std::vector<PortsJsonObject>& LbdsrJsonObject::getPorts() const{
  return m_ports;
}

void LbdsrJsonObject::addPorts(PortsJsonObject value) {
  m_ports.push_back(value);
  m_portsIsSet = true;
}


bool LbdsrJsonObject::portsIsSet() const {
  return m_portsIsSet;
}

void LbdsrJsonObject::unsetPorts() {
  m_portsIsSet = false;
}

std::string LbdsrJsonObject::getAlgorithm() const {
  return m_algorithm;
}

void LbdsrJsonObject::setAlgorithm(std::string value) {
  m_algorithm = value;
  m_algorithmIsSet = true;
}

bool LbdsrJsonObject::algorithmIsSet() const {
  return m_algorithmIsSet;
}

void LbdsrJsonObject::unsetAlgorithm() {
  m_algorithmIsSet = false;
}

FrontendJsonObject LbdsrJsonObject::getFrontend() const {
  return m_frontend;
}

void LbdsrJsonObject::setFrontend(FrontendJsonObject value) {
  m_frontend = value;
  m_frontendIsSet = true;
}

bool LbdsrJsonObject::frontendIsSet() const {
  return m_frontendIsSet;
}

void LbdsrJsonObject::unsetFrontend() {
  m_frontendIsSet = false;
}

BackendJsonObject LbdsrJsonObject::getBackend() const {
  return m_backend;
}

void LbdsrJsonObject::setBackend(BackendJsonObject value) {
  m_backend = value;
  m_backendIsSet = true;
}

bool LbdsrJsonObject::backendIsSet() const {
  return m_backendIsSet;
}

void LbdsrJsonObject::unsetBackend() {
  m_backendIsSet = false;
}


}
}
}
}

