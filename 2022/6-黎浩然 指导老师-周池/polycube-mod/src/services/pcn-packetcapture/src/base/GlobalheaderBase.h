/**
* packetcapture API generated from packetcapture.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* GlobalheaderBase.h
*
*
*/

#pragma once

#include "../serializer/GlobalheaderJsonObject.h"






#include <spdlog/spdlog.h>

using namespace polycube::service::model;

class Packetcapture;

class GlobalheaderBase {
 public:
  
  GlobalheaderBase(Packetcapture &parent);
  
  virtual ~GlobalheaderBase();
  virtual void update(const GlobalheaderJsonObject &conf);
  virtual GlobalheaderJsonObject toJsonObject();

  /// <summary>
  /// magic number
  /// </summary>
  virtual uint32_t getMagic() = 0;
  virtual void setMagic(const uint32_t &value) = 0;

  /// <summary>
  /// major version number
  /// </summary>
  virtual uint16_t getVersionMajor() = 0;
  virtual void setVersionMajor(const uint16_t &value) = 0;

  /// <summary>
  /// minor version number
  /// </summary>
  virtual uint16_t getVersionMinor() = 0;
  virtual void setVersionMinor(const uint16_t &value) = 0;

  /// <summary>
  /// GMT to local correction
  /// </summary>
  virtual int32_t getThiszone() = 0;
  virtual void setThiszone(const int32_t &value) = 0;

  /// <summary>
  /// accuracy of timestamps
  /// </summary>
  virtual uint32_t getSigfigs() = 0;
  virtual void setSigfigs(const uint32_t &value) = 0;

  /// <summary>
  /// max length of captured packets, in octets
  /// </summary>
  virtual uint32_t getSnaplen() = 0;
  virtual void setSnaplen(const uint32_t &value) = 0;

  /// <summary>
  /// Capture linktype (eg. ethernet, wifi..)
  /// </summary>
  virtual uint32_t getLinktype() = 0;
  virtual void setLinktype(const uint32_t &value) = 0;

  std::shared_ptr<spdlog::logger> logger();
 protected:
  Packetcapture &parent_;
};
