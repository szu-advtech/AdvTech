/**
* packetcapture API generated from packetcapture.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* PacketBase.h
*
*
*/

#pragma once

#include "../serializer/PacketJsonObject.h"






#include <spdlog/spdlog.h>

using namespace polycube::service::model;

class Packetcapture;

class PacketBase {
 public:
  
  PacketBase(Packetcapture &parent);
  
  virtual ~PacketBase();
  virtual void update(const PacketJsonObject &conf);
  virtual PacketJsonObject toJsonObject();

  /// <summary>
  /// Capture length
  /// </summary>
  virtual uint32_t getCapturelen() = 0;
  virtual void setCapturelen(const uint32_t &value) = 0;

  /// <summary>
  /// Packet length
  /// </summary>
  virtual uint32_t getPacketlen() = 0;
  virtual void setPacketlen(const uint32_t &value) = 0;

  /// <summary>
  /// timestamp - seconds
  /// </summary>
  virtual uint32_t getTimestampSeconds() = 0;
  virtual void setTimestampSeconds(const uint32_t &value) = 0;

  /// <summary>
  /// timestamp - microseconds
  /// </summary>
  virtual uint32_t getTimestampMicroseconds() = 0;
  virtual void setTimestampMicroseconds(const uint32_t &value) = 0;

  /// <summary>
  /// packet raw data
  /// </summary>
  virtual std::string getRawdata() = 0;
  virtual void setRawdata(const std::string &value) = 0;

  std::shared_ptr<spdlog::logger> logger();
 protected:
  Packetcapture &parent_;
};
