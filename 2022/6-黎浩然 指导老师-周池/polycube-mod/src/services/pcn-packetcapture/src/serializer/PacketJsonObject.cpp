/**
* packetcapture API generated from packetcapture.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "PacketJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

PacketJsonObject::PacketJsonObject() {
  m_capturelenIsSet = false;
  m_packetlenIsSet = false;
  m_timestampSecondsIsSet = false;
  m_timestampMicrosecondsIsSet = false;
  m_rawdataIsSet = false;
}

PacketJsonObject::PacketJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_capturelenIsSet = false;
  m_packetlenIsSet = false;
  m_timestampSecondsIsSet = false;
  m_timestampMicrosecondsIsSet = false;
  m_rawdataIsSet = false;


  if (val.count("capturelen")) {
    setCapturelen(val.at("capturelen").get<uint32_t>());
  }

  if (val.count("packetlen")) {
    setPacketlen(val.at("packetlen").get<uint32_t>());
  }

  if (val.count("timestamp-seconds")) {
    setTimestampSeconds(val.at("timestamp-seconds").get<uint32_t>());
  }

  if (val.count("timestamp-microseconds")) {
    setTimestampMicroseconds(val.at("timestamp-microseconds").get<uint32_t>());
  }

  if (val.count("rawdata")) {
    setRawdata(val.at("rawdata").get<std::string>());
  }
}

nlohmann::json PacketJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_capturelenIsSet) {
    val["capturelen"] = m_capturelen;
  }

  if (m_packetlenIsSet) {
    val["packetlen"] = m_packetlen;
  }

  if (m_timestampSecondsIsSet) {
    val["timestamp-seconds"] = m_timestampSeconds;
  }

  if (m_timestampMicrosecondsIsSet) {
    val["timestamp-microseconds"] = m_timestampMicroseconds;
  }

  if (m_rawdataIsSet) {
    val["rawdata"] = m_rawdata;
  }

  return val;
}

uint32_t PacketJsonObject::getCapturelen() const {
  return m_capturelen;
}

void PacketJsonObject::setCapturelen(uint32_t value) {
  m_capturelen = value;
  m_capturelenIsSet = true;
}

bool PacketJsonObject::capturelenIsSet() const {
  return m_capturelenIsSet;
}

void PacketJsonObject::unsetCapturelen() {
  m_capturelenIsSet = false;
}

uint32_t PacketJsonObject::getPacketlen() const {
  return m_packetlen;
}

void PacketJsonObject::setPacketlen(uint32_t value) {
  m_packetlen = value;
  m_packetlenIsSet = true;
}

bool PacketJsonObject::packetlenIsSet() const {
  return m_packetlenIsSet;
}

void PacketJsonObject::unsetPacketlen() {
  m_packetlenIsSet = false;
}

uint32_t PacketJsonObject::getTimestampSeconds() const {
  return m_timestampSeconds;
}

void PacketJsonObject::setTimestampSeconds(uint32_t value) {
  m_timestampSeconds = value;
  m_timestampSecondsIsSet = true;
}

bool PacketJsonObject::timestampSecondsIsSet() const {
  return m_timestampSecondsIsSet;
}

void PacketJsonObject::unsetTimestampSeconds() {
  m_timestampSecondsIsSet = false;
}

uint32_t PacketJsonObject::getTimestampMicroseconds() const {
  return m_timestampMicroseconds;
}

void PacketJsonObject::setTimestampMicroseconds(uint32_t value) {
  m_timestampMicroseconds = value;
  m_timestampMicrosecondsIsSet = true;
}

bool PacketJsonObject::timestampMicrosecondsIsSet() const {
  return m_timestampMicrosecondsIsSet;
}

void PacketJsonObject::unsetTimestampMicroseconds() {
  m_timestampMicrosecondsIsSet = false;
}

std::string PacketJsonObject::getRawdata() const {
  return m_rawdata;
}

void PacketJsonObject::setRawdata(std::string value) {
  m_rawdata = value;
  m_rawdataIsSet = true;
}

bool PacketJsonObject::rawdataIsSet() const {
  return m_rawdataIsSet;
}

void PacketJsonObject::unsetRawdata() {
  m_rawdataIsSet = false;
}


}
}
}

