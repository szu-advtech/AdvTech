/**
* k8switch API
* k8switch API generated from k8switch.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* K8switchJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"

#include "ServiceJsonObject.h"
#include "PortsJsonObject.h"
#include "FwdTableJsonObject.h"
#include <vector>
#include "polycube/services/cube.h"

namespace io {
namespace swagger {
namespace server {
namespace model {


/// <summary>
///
/// </summary>
class  K8switchJsonObject : public JsonObjectBase {
public:
  K8switchJsonObject();
  K8switchJsonObject(const nlohmann::json &json);
  ~K8switchJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Name of the k8switch service
  /// </summary>
  std::string getName() const;
  void setName(std::string value);
  bool nameIsSet() const;

  /// <summary>
  /// Entry of the ports table
  /// </summary>
  const std::vector<PortsJsonObject>& getPorts() const;
  void addPorts(PortsJsonObject value);
  bool portsIsSet() const;
  void unsetPorts();

  /// <summary>
  /// Range of VIPs where clusterIP services are exposed
  /// </summary>
  std::string getClusterIpSubnet() const;
  void setClusterIpSubnet(std::string value);
  bool clusterIpSubnetIsSet() const;

  /// <summary>
  /// Range of IPs of pods in this node
  /// </summary>
  std::string getClientSubnet() const;
  void setClientSubnet(std::string value);
  bool clientSubnetIsSet() const;

  /// <summary>
  /// Range where client&#39;s IPs are mapped into
  /// </summary>
  std::string getVirtualClientSubnet() const;
  void setVirtualClientSubnet(std::string value);
  bool virtualClientSubnetIsSet() const;

  /// <summary>
  /// Services (i.e., virtual ip:protocol:port) exported to the client
  /// </summary>
  const std::vector<ServiceJsonObject>& getService() const;
  void addService(ServiceJsonObject value);
  bool serviceIsSet() const;
  void unsetService();

  /// <summary>
  /// Entry associated with the forwarding table
  /// </summary>
  const std::vector<FwdTableJsonObject>& getFwdTable() const;
  void addFwdTable(FwdTableJsonObject value);
  bool fwdTableIsSet() const;
  void unsetFwdTable();

private:
  std::string m_name;
  bool m_nameIsSet;
  std::vector<PortsJsonObject> m_ports;
  bool m_portsIsSet;
  std::string m_clusterIpSubnet;
  bool m_clusterIpSubnetIsSet;
  std::string m_clientSubnet;
  bool m_clientSubnetIsSet;
  std::string m_virtualClientSubnet;
  bool m_virtualClientSubnetIsSet;
  std::vector<ServiceJsonObject> m_service;
  bool m_serviceIsSet;
  std::vector<FwdTableJsonObject> m_fwdTable;
  bool m_fwdTableIsSet;
};

}
}
}
}

