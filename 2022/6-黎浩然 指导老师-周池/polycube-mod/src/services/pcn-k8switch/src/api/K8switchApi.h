/**
* k8switch API
* k8switch API generated from k8switch.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* K8switchApi.h
*
*/

#pragma once

#define POLYCUBE_SERVICE_NAME "k8switch"


#include "polycube/services/response.h"
#include "polycube/services/shared_lib_elements.h"

#include "FwdTableJsonObject.h"
#include "K8switchJsonObject.h"
#include "PortsJsonObject.h"
#include "ServiceJsonObject.h"
#include "ServiceBackendJsonObject.h"
#include <vector>


#ifdef __cplusplus
extern "C" {
#endif

Response create_k8switch_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_k8switch_fwd_table_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_k8switch_fwd_table_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_k8switch_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_k8switch_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_k8switch_service_backend_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_k8switch_service_backend_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_k8switch_service_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_k8switch_service_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response delete_k8switch_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_k8switch_fwd_table_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_k8switch_fwd_table_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_k8switch_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_k8switch_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_k8switch_service_backend_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_k8switch_service_backend_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_k8switch_service_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_k8switch_service_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_client_subnet_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_cluster_ip_subnet_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_fwd_table_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_fwd_table_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_fwd_table_mac_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_fwd_table_port_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_ports_type_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_service_backend_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_service_backend_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_service_backend_name_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_service_backend_weight_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_service_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_service_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_service_name_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_k8switch_virtual_client_subnet_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response replace_k8switch_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_k8switch_fwd_table_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_k8switch_fwd_table_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_k8switch_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_k8switch_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_k8switch_service_backend_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_k8switch_service_backend_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_k8switch_service_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_k8switch_service_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_client_subnet_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_cluster_ip_subnet_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_fwd_table_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_fwd_table_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_fwd_table_mac_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_fwd_table_port_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_service_backend_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_service_backend_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_service_backend_name_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_service_backend_weight_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_service_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_service_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_service_name_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_k8switch_virtual_client_subnet_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);

Response k8switch_fwd_table_list_by_id_help(const char *name, const Key *keys, size_t num_keys);
Response k8switch_list_by_id_help(const char *name, const Key *keys, size_t num_keys);
Response k8switch_ports_list_by_id_help(const char *name, const Key *keys, size_t num_keys);
Response k8switch_service_backend_list_by_id_help(const char *name, const Key *keys, size_t num_keys);
Response k8switch_service_list_by_id_help(const char *name, const Key *keys, size_t num_keys);


#ifdef __cplusplus
}
#endif

